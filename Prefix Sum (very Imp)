<------------------------------------------------------974. Subarray Sums Divisible by K--------------------------------------------------------------------------------->
problem link:https://leetcode.com/problems/subarray-sums-divisible-by-k/submissions/1282535844/?envType=daily-question&envId=2024-06-09
class Solution {
    public int subarraysDivByK(int[] nums, int k) {
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0,1);
        int sum = 0;
        int cnt =0;
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            int mod = sum % k;
            if(mod<0){
                mod += k;
            }
            if (map.containsKey(mod)) {
                cnt += map.get(mod);
                map.put(mod, map.getOrDefault(mod,0) + 1);
            } else {
                map.put(mod, 1);
            }

        }
        return cnt;
    }
}
<------------------------------------------------------------------------523. Continuous Subarray Sum------------------------------------------------------------------------>
https://leetcode.com/problems/continuous-subarray-sum/?envType=daily-question&envId=2024-06-08

class Solution {
    public boolean checkSubarraySum(int[] nums, int k) {
       HashMap<Integer,Integer> map = new HashMap<>();
       map.put(0,-1);
        int sum = 0;
        for(int i=0;i<nums.length;i++){
            sum +=nums[i];
            if (map.containsKey(sum%k) ) {
                int idx = map.get(sum%k);
                if(i-idx>=2){
                    return true;
                }
            }
            else{//Only store the first occurence 
                map.put(sum%k,i); 
            }

        }
        return false;
    }
}
