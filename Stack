
<------------------------------------------------------------20. Valid Parentheses------------------------------------------------------------------------------->
class Solution {
    public boolean isValid(String s) {
        if(s.length()%2 != 0) return false;
        Stack<Character> stack = new Stack<>();
        for(int i =0;i< s.length();i++){
            char ch = s.charAt(i);
            if(ch == '(' || ch == '[' || ch == '{'){
                stack.push(ch);
            }else{
                if(stack.isEmpty()) return false;
                char top = stack.peek();
                if(ch == ')'&& top != '(') return false;
                else if(ch == '}' && top != '{') return false;
                else if(ch == ']' && top != '[') return false;
                else{
                    stack.pop();
                }
            }
        }
        if(!stack.isEmpty()){
            return false;
        }
        return true;
    }
}
<-------------------------------------------------------------735. Asteroid Collision----------------------------------------------------------------------------->
class Solution {
    public int[] asteroidCollision(int[] asteroids) {
        Stack<Integer> st = new Stack<>();
        for(int i =0;i<asteroids.length;i++){
            if(st.isEmpty() || asteroids[i] > 0){
                st.push(asteroids[i]);
            }
            else{
                while(!st.isEmpty()){
                    int top  = st.peek();
                    if(top<0){
                        st.push(asteroids[i]);
                        break;
                    }
                    int modVal = Math.abs(asteroids[i]);
                    if(modVal == top){
                        st.pop();
                        break;
                    }
                    else if (modVal<top){
                        break;
                    }else{
                        st.pop();
                        if(st.isEmpty()){
                            st.push(asteroids[i]);
                            break;
                        }
                    }
                }
                
            }
        }
        int [] ans = new int [st.size()];
        for(int i = st.size() -1; i>=0;i--){
            ans[i] = st.pop();
        }
        return ans;
    }
}
<-------------------------------------------------------------901. Online Stock Span----------------------------------------------------------------------------->
class StockSpanner {
    Stack <Integer> st ;
    ArrayList<Integer> list;
    public StockSpanner() {
        st = new Stack();
        list = new ArrayList<>();
    }
    
    public int next(int price) {
        list.add(price);
        while(!st.isEmpty() && list.get(st.peek()) <= price){
            st.pop();
        }
        int prevIndex = st.isEmpty()?-1:st.peek();
        int currentIndex = list.size()-1;
        int ans = currentIndex - prevIndex;
        st.push(currentIndex);
        return ans;
    }
}

/**
 * Your StockSpanner object will be instantiated and called as such:
 * StockSpanner obj = new StockSpanner();
 * int param_1 = obj.next(price);
 */
<-------------------------------------------------------------901. Online Stock Span----------------------------------------------------------------------------->
